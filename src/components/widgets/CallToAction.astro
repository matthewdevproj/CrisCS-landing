---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { CallToAction, Widget } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';

interface Service {
  title: string;
  description: string;
  highlights?: string[];
}

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: string | CallToAction[];
  services?: Service[];
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  actions = await Astro.slots.render('actions'),
  services = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="max-w-5xl mx-auto p-6">
    <Headline
      title={title}
      subtitle={subtitle}
      tagline={tagline}
      classes={{
        container: 'mb-12 text-center',
        title: 'text-3xl md:text-4xl font-bold tracking-tight mb-6 text-slate-800 dark:text-white',
        subtitle: 'text-lg text-slate-600 dark:text-slate-400 max-w-3xl mx-auto leading-relaxed',
      }}
    />

    {
      services.length > 0 && (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {services.map((service, index) => (
            <div class="group bg-white dark:bg-slate-800/50 p-6 rounded-xl border border-slate-200 dark:border-slate-700 backdrop-blur-sm transition-all duration-300 hover:shadow-md">
              <div class="flex items-start gap-4">
                <div class="flex-shrink-0 w-12 h-12 bg-slate-100 dark:bg-slate-700 rounded-lg flex items-center justify-center text-slate-600 dark:text-slate-300 font-semibold text-sm border">
                  {index + 1}
                </div>
                <div class="flex-1">
                  <h3 class="text-lg font-semibold text-slate-800 dark:text-white mb-2">
                    {service.title}
                  </h3>
                  <p class="text-sm text-slate-600 dark:text-slate-400 mb-3 leading-relaxed">
                    {service.description}
                  </p>
                  {Array.isArray(service.highlights) && service.highlights.length > 0 && (
                    <ul class="space-y-1">
                      {service.highlights.map((point) => (
                        <li class="flex items-center gap-2 text-xs text-slate-500 dark:text-slate-400">
                          <svg class="w-3 h-3 text-slate-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                          {point}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )
    }

    {
      actions && (
        <div class="flex flex-col sm:flex-row justify-center gap-4 mt-12">
          {Array.isArray(actions) ? (
            actions.map((action) => (
              <Button 
                {...(action || {})} 
                class="px-6 py-3 font-medium rounded-lg transition-all duration-300 hover:scale-105 min-w-[160px] border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700"
              />
            ))
          ) : (
            <Fragment set:html={actions} />
          )}
        </div>
      )
    }
  </div>
</WidgetWrapper>