---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;
---

<form id="contact-form" method="POST" action="/api/send-email" class="space-y-4">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
          name && (
            <div class="mb-4">
              {label && (
                <label for={name} class="block text-sm font-medium pb-2">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required
                class="py-2 px-2 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900
                placeholder-gray-400 dark:placeholder-gray-600"
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium pb-2">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 3}
          placeholder={textarea.placeholder}
          required
          class="py-2 px-4 block w-full text-muted rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 placeholder-gray-400 dark:placeholder-gray-600"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-5 flex items-center">
        <div class="flex">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            required
            class="cursor-pointer mt-1 py-3 px-4 w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900  text-blue-600"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400 flex">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-4 flex justify-center ">
        <Button variant="primary" id="contact-submit" type="submit" class="relative flex items-center justify-center gap-2 disabled:opacity-60 disabled:cursor-not-allowed min-w-[160px] min-h-[70px]">
          <span id="contact-button-text">{button}</span>
          <span id="contact-spinner" class="hidden animate-spin border-2 border-white border-t-transparent rounded-full w-4 h-4"></span>
        </Button>
      </div>
    )
  }
  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>
<div id="toast"
  class="fixed bottom-6 left-1/2 -translate-x-1/2 bg-blue-600 text-white text-sm px-4 py-2 rounded-lg shadow-lg opacity-0 pointer-events-none transition-all duration-300 z-50">
  Message sent.
</div>

<script>
  const form = document.getElementById("contact-form") as HTMLFormElement | null;
  const submitBtn = document.getElementById("contact-submit") as HTMLButtonElement | null;
  const btnText = document.getElementById("contact-button-text") as HTMLSpanElement | null;
  const spinner = document.getElementById("contact-spinner") as HTMLSpanElement | null;
  const toast = document.getElementById("toast") as HTMLDivElement | null;
  const disclaimer = document.getElementById("disclaimer") as HTMLInputElement | null;
  

  if (form && submitBtn && btnText && spinner && toast) {
    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      if (disclaimer && !disclaimer.checked) return;

      // Estado: enviando
      submitBtn.disabled = true;
      btnText.classList.add("hidden");
      spinner.classList.remove("hidden");

      const formData = new FormData(form);
      const res = await fetch("/api/send-email", {
        method: "POST",
        body: formData,
      });

      // Restablecer estado
      spinner.classList.add("hidden");
      btnText.classList.remove("hidden");
      submitBtn.disabled = false;

      if (res.ok) {
        form.reset();

        // Mostrar toast
        toast.classList.remove("opacity-0");
        toast.classList.add("translate-y-0");

        // Ocultar despuÃ©s de 4s
        setTimeout(() => {
          toast.classList.add("opacity-0");
        }, 4000);
      }
    });
  }
</script>
<style>
  #toast {
  transform: translate(-50%, 20px);
}
#toast:not(.opacity-0) {
  transform: translate(-50%, 0);
}
</style>